/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif

#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_GameLiftRealtimeNative(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_GameLiftRealtimeNative(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_GameLiftRealtimeNative(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>
#include <exception>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char *msg) : swig_msg(msg) {
    }

    DirectorException(const std::string &msg) : swig_msg(msg) {
    }

    virtual ~DirectorException() throw() {
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }

    static void raise(const char *msg) {
      throw DirectorPureVirtualException(msg);
    }
  };

  /* Represents a GCHandle to a callback */
  typedef void* GCHandle;
}


#include <typeinfo>
#include <stdexcept>


#include <string>


#include <vector>
#include <algorithm>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


SWIGINTERN void SWIG_CSharpException(int code, const char *msg) {
  if (code == SWIG_ValueError) {
    SWIG_CSharpExceptionArgumentCodes exception_code = SWIG_CSharpArgumentOutOfRangeException;
    SWIG_CSharpSetPendingExceptionArgument(exception_code, msg, 0);
  } else {
    SWIG_CSharpExceptionCodes exception_code = SWIG_CSharpApplicationException;
    switch(code) {
    case SWIG_MemoryError:
      exception_code = SWIG_CSharpOutOfMemoryException;
      break;
    case SWIG_IndexError:
      exception_code = SWIG_CSharpIndexOutOfRangeException;
      break;
    case SWIG_DivisionByZero:
      exception_code = SWIG_CSharpDivideByZeroException;
      break;
    case SWIG_IOError:
      exception_code = SWIG_CSharpIOException;
      break;
    case SWIG_OverflowError:
      exception_code = SWIG_CSharpOverflowException;
      break;
    case SWIG_RuntimeError:
    case SWIG_TypeError:
    case SWIG_SyntaxError:
    case SWIG_SystemError:
    case SWIG_UnknownError:
    default:
      exception_code = SWIG_CSharpApplicationException;
      break;
    }
    SWIG_CSharpSetPendingException(exception_code, msg);
  }
}


#include <typeinfo>
#include <stdexcept>


#include <utility>


typedef unsigned char NativeByteArray;

SWIGINTERN NativeByteArray *new_NativeByteArray(int nelements){
  return new unsigned char[nelements]();
}
SWIGINTERN void delete_NativeByteArray(NativeByteArray *self){
  delete [] self;
}
SWIGINTERN unsigned char NativeByteArray_getitem(NativeByteArray *self,int index){
  return self[index];
}
SWIGINTERN void NativeByteArray_setitem(NativeByteArray *self,int index,unsigned char value){
  self[index] = value;
}
SWIGINTERN unsigned char *NativeByteArray_cast(NativeByteArray *self){
  return self;
}
SWIGINTERN NativeByteArray *NativeByteArray_frompointer(unsigned char *t){
  return (NativeByteArray *) t;
}

/* Includes the header in the wrapper code */
#include "../include/DTLSConnection.h"




/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "GameLiftRealtimeNative_wrap.h"

SwigDirector_SendEncryptedCallback::SwigDirector_SendEncryptedCallback() : Aws::GameLift::SendEncryptedCallback(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_SendEncryptedCallback::~SwigDirector_SendEncryptedCallback() {
  
}


void SwigDirector_SendEncryptedCallback::sendEncrypted(unsigned char const *buf, size_t len) {
  void * jbuf = 0 ;
  unsigned long jlen  ;
  
  if (!swig_callbacksendEncrypted) {
    Swig::DirectorPureVirtualException::raise("Aws::GameLift::SendEncryptedCallback::sendEncrypted");
    return;
  } else {
    jbuf = (void *) buf; 
    jlen = (unsigned long)len;
    swig_callbacksendEncrypted_dispatcher(swig_callbacksendEncrypted, jbuf, jlen);
  }
}

void SwigDirector_SendEncryptedCallback::swig_connect_director(SWIG_Callback0_Dispatcher_t callbacksendEncrypted_dispatcher, Swig::GCHandle callbacksendEncrypted) {
  swig_callbacksendEncrypted_dispatcher = callbacksendEncrypted_dispatcher;
  swig_callbacksendEncrypted = callbacksendEncrypted;
}

void SwigDirector_SendEncryptedCallback::swig_init_callbacks() {
  swig_callbacksendEncrypted_dispatcher = 0;
  swig_callbacksendEncrypted = 0;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_GameLiftRealtimeNative_new_NativeByteArray(int jarg1) {
  void * jresult ;
  int arg1 ;
  NativeByteArray *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (NativeByteArray *)new_NativeByteArray(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameLiftRealtimeNative_delete_NativeByteArray(void * jarg1) {
  NativeByteArray *arg1 = (NativeByteArray *) 0 ;
  
  arg1 = (NativeByteArray *)jarg1; 
  delete_NativeByteArray(arg1);
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_GameLiftRealtimeNative_NativeByteArray_getitem(void * jarg1, int jarg2) {
  unsigned char jresult ;
  NativeByteArray *arg1 = (NativeByteArray *) 0 ;
  int arg2 ;
  unsigned char result;
  
  arg1 = (NativeByteArray *)jarg1; 
  arg2 = (int)jarg2; 
  result = (unsigned char)NativeByteArray_getitem(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameLiftRealtimeNative_NativeByteArray_setitem(void * jarg1, int jarg2, unsigned char jarg3) {
  NativeByteArray *arg1 = (NativeByteArray *) 0 ;
  int arg2 ;
  unsigned char arg3 ;
  
  arg1 = (NativeByteArray *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned char)jarg3; 
  NativeByteArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameLiftRealtimeNative_NativeByteArray_cast(void * jarg1) {
  void * jresult ;
  NativeByteArray *arg1 = (NativeByteArray *) 0 ;
  unsigned char *result = 0 ;
  
  arg1 = (NativeByteArray *)jarg1; 
  result = (unsigned char *)NativeByteArray_cast(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameLiftRealtimeNative_NativeByteArray_frompointer(void * jarg1) {
  void * jresult ;
  unsigned char *arg1 = (unsigned char *) 0 ;
  NativeByteArray *result = 0 ;
  
  arg1 = (unsigned char *)jarg1; 
  result = (NativeByteArray *)NativeByteArray_frompointer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameLiftRealtimeNative_delete_SendEncryptedCallback(void * jarg1) {
  Aws::GameLift::SendEncryptedCallback *arg1 = (Aws::GameLift::SendEncryptedCallback *) 0 ;
  
  arg1 = (Aws::GameLift::SendEncryptedCallback *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameLiftRealtimeNative_SendEncryptedCallback_sendEncrypted(void * jarg1, void * jarg2, unsigned long jarg3) {
  Aws::GameLift::SendEncryptedCallback *arg1 = (Aws::GameLift::SendEncryptedCallback *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  size_t arg3 ;
  
  arg1 = (Aws::GameLift::SendEncryptedCallback *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  arg3 = (size_t)jarg3; 
  (arg1)->sendEncrypted((unsigned char const *)arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameLiftRealtimeNative_new_SendEncryptedCallback() {
  void * jresult ;
  Aws::GameLift::SendEncryptedCallback *result = 0 ;
  
  result = (Aws::GameLift::SendEncryptedCallback *)new SwigDirector_SendEncryptedCallback();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameLiftRealtimeNative_SendEncryptedCallback_director_connect(void *objarg, SwigDirector_SendEncryptedCallback::SWIG_Callback0_Dispatcher_t callback0Static, void* callback0) {
  Aws::GameLift::SendEncryptedCallback *obj = (Aws::GameLift::SendEncryptedCallback *)objarg;
  SwigDirector_SendEncryptedCallback *director = static_cast<SwigDirector_SendEncryptedCallback *>(obj);
  director->swig_connect_director(callback0Static, callback0);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameLiftRealtimeNative_new_DTLSConnection_Result__SWIG_0(void * jarg1) {
  void * jresult ;
  Aws::GameLift::DTLSConnection::Result *arg1 = 0 ;
  Aws::GameLift::DTLSConnection::Result *result = 0 ;
  
  arg1 = (Aws::GameLift::DTLSConnection::Result *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Aws::GameLift::DTLSConnection::Result const & type is null", 0);
    return 0;
  } 
  result = (Aws::GameLift::DTLSConnection::Result *)new Aws::GameLift::DTLSConnection::Result((Aws::GameLift::DTLSConnection::Result const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameLiftRealtimeNative_delete_DTLSConnection_Result(void * jarg1) {
  Aws::GameLift::DTLSConnection::Result *arg1 = (Aws::GameLift::DTLSConnection::Result *) 0 ;
  
  arg1 = (Aws::GameLift::DTLSConnection::Result *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameLiftRealtimeNative_DTLSConnection_Result_get_type(void * jarg1) {
  int jresult ;
  Aws::GameLift::DTLSConnection::Result *arg1 = (Aws::GameLift::DTLSConnection::Result *) 0 ;
  Aws::GameLift::DTLSConnection::Result::Type result;
  
  arg1 = (Aws::GameLift::DTLSConnection::Result *)jarg1; 
  result = (Aws::GameLift::DTLSConnection::Result::Type)((Aws::GameLift::DTLSConnection::Result const *)arg1)->get_type();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameLiftRealtimeNative_DTLSConnection_Result_get_message(void * jarg1) {
  void * jresult ;
  Aws::GameLift::DTLSConnection::Result *arg1 = (Aws::GameLift::DTLSConnection::Result *) 0 ;
  unsigned char *result = 0 ;
  
  arg1 = (Aws::GameLift::DTLSConnection::Result *)jarg1; 
  result = (unsigned char *)((Aws::GameLift::DTLSConnection::Result const *)arg1)->get_message();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_GameLiftRealtimeNative_DTLSConnection_Result_get_length(void * jarg1) {
  unsigned long jresult ;
  Aws::GameLift::DTLSConnection::Result *arg1 = (Aws::GameLift::DTLSConnection::Result *) 0 ;
  size_t result;
  
  arg1 = (Aws::GameLift::DTLSConnection::Result *)jarg1; 
  result = ((Aws::GameLift::DTLSConnection::Result const *)arg1)->get_length();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GameLiftRealtimeNative_DTLSConnection_Result_get_info(void * jarg1) {
  char * jresult ;
  Aws::GameLift::DTLSConnection::Result *arg1 = (Aws::GameLift::DTLSConnection::Result *) 0 ;
  std::string result;
  
  arg1 = (Aws::GameLift::DTLSConnection::Result *)jarg1; 
  result = ((Aws::GameLift::DTLSConnection::Result const *)arg1)->get_info();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GameLiftRealtimeNative_DTLSConnection_Result_get_code(void * jarg1) {
  int jresult ;
  Aws::GameLift::DTLSConnection::Result *arg1 = (Aws::GameLift::DTLSConnection::Result *) 0 ;
  int result;
  
  arg1 = (Aws::GameLift::DTLSConnection::Result *)jarg1; 
  result = (int)((Aws::GameLift::DTLSConnection::Result const *)arg1)->get_code();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameLiftRealtimeNative_new_DTLSConnection(void * jarg1) {
  void * jresult ;
  Aws::GameLift::SendEncryptedCallback *arg1 = (Aws::GameLift::SendEncryptedCallback *) 0 ;
  Aws::GameLift::DTLSConnection *result = 0 ;
  
  arg1 = (Aws::GameLift::SendEncryptedCallback *)jarg1; 
  result = (Aws::GameLift::DTLSConnection *)new Aws::GameLift::DTLSConnection(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GameLiftRealtimeNative_delete_DTLSConnection(void * jarg1) {
  Aws::GameLift::DTLSConnection *arg1 = (Aws::GameLift::DTLSConnection *) 0 ;
  
  arg1 = (Aws::GameLift::DTLSConnection *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameLiftRealtimeNative_DTLSConnection_open(void * jarg1, char * jarg2, char * jarg3, unsigned long jarg4) {
  void * jresult ;
  Aws::GameLift::DTLSConnection *arg1 = (Aws::GameLift::DTLSConnection *) 0 ;
  std::string arg2 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  SwigValueWrapper< Aws::GameLift::DTLSConnection::Result > result;
  
  arg1 = (Aws::GameLift::DTLSConnection *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  arg3 = (char *)jarg3; 
  arg4 = (size_t)jarg4; 
  result = (arg1)->open(arg2,arg3,arg4);
  jresult = new Aws::GameLift::DTLSConnection::Result((const Aws::GameLift::DTLSConnection::Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameLiftRealtimeNative_DTLSConnection_send(void * jarg1, void * jarg2, unsigned long jarg3) {
  void * jresult ;
  Aws::GameLift::DTLSConnection *arg1 = (Aws::GameLift::DTLSConnection *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  size_t arg3 ;
  SwigValueWrapper< Aws::GameLift::DTLSConnection::Result > result;
  
  arg1 = (Aws::GameLift::DTLSConnection *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (arg1)->send((unsigned char const *)arg2,arg3);
  jresult = new Aws::GameLift::DTLSConnection::Result((const Aws::GameLift::DTLSConnection::Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameLiftRealtimeNative_DTLSConnection_receive_message(void * jarg1, void * jarg2, unsigned long jarg3) {
  void * jresult ;
  Aws::GameLift::DTLSConnection *arg1 = (Aws::GameLift::DTLSConnection *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  size_t arg3 ;
  SwigValueWrapper< Aws::GameLift::DTLSConnection::Result > result;
  
  arg1 = (Aws::GameLift::DTLSConnection *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (arg1)->receive_message((unsigned char const *)arg2,arg3);
  jresult = new Aws::GameLift::DTLSConnection::Result((const Aws::GameLift::DTLSConnection::Result &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GameLiftRealtimeNative_DTLSConnection_close(void * jarg1) {
  void * jresult ;
  Aws::GameLift::DTLSConnection *arg1 = (Aws::GameLift::DTLSConnection *) 0 ;
  SwigValueWrapper< Aws::GameLift::DTLSConnection::Result > result;
  
  arg1 = (Aws::GameLift::DTLSConnection *)jarg1; 
  result = (arg1)->close();
  jresult = new Aws::GameLift::DTLSConnection::Result((const Aws::GameLift::DTLSConnection::Result &)result); 
  return jresult;
}


#ifdef __cplusplus
}
#endif

