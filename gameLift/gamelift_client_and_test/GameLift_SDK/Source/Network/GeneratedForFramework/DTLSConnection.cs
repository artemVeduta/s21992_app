//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace GameLiftRealtimeNative {

public class DTLSConnection : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal DTLSConnection(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(DTLSConnection obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~DTLSConnection() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          GameLiftRealtimeNativePINVOKE.delete_DTLSConnection(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public class Result : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal Result(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Result obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~Result() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            GameLiftRealtimeNativePINVOKE.delete_DTLSConnection_Result(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public Result(DTLSConnection.Result result) : this(GameLiftRealtimeNativePINVOKE.new_DTLSConnection_Result__SWIG_0(DTLSConnection.Result.getCPtr(result)), true) {
      if (GameLiftRealtimeNativePINVOKE.SWIGPendingException.Pending) throw GameLiftRealtimeNativePINVOKE.SWIGPendingException.Retrieve();
    }
  
    public DTLSConnection.Result.Type get_type() {
      DTLSConnection.Result.Type ret = (DTLSConnection.Result.Type)GameLiftRealtimeNativePINVOKE.DTLSConnection_Result_get_type(swigCPtr);
      return ret;
    }
  
    public SWIGTYPE_p_unsigned_char get_message() {
      global::System.IntPtr cPtr = GameLiftRealtimeNativePINVOKE.DTLSConnection_Result_get_message(swigCPtr);
      SWIGTYPE_p_unsigned_char ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
      return ret;
    }
  
    public uint get_length() {
      uint ret = GameLiftRealtimeNativePINVOKE.DTLSConnection_Result_get_length(swigCPtr);
      return ret;
    }
  
    public string get_info() {
      string ret = GameLiftRealtimeNativePINVOKE.DTLSConnection_Result_get_info(swigCPtr);
      return ret;
    }
  
    public int get_code() {
      int ret = GameLiftRealtimeNativePINVOKE.DTLSConnection_Result_get_code(swigCPtr);
      return ret;
    }
  
    public enum Type {
      Close,
      Open,
      Error,
      Message,
      OK
    }
  
  }

  public DTLSConnection(SendEncryptedCallback callback) : this(GameLiftRealtimeNativePINVOKE.new_DTLSConnection(SendEncryptedCallback.getCPtr(callback)), true) {
  }

  public DTLSConnection.Result open(string host, string trusted_cert, uint trusted_cert_len) {
    DTLSConnection.Result ret = new DTLSConnection.Result(GameLiftRealtimeNativePINVOKE.DTLSConnection_open(swigCPtr, host, trusted_cert, trusted_cert_len), true);
    if (GameLiftRealtimeNativePINVOKE.SWIGPendingException.Pending) throw GameLiftRealtimeNativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DTLSConnection.Result send(SWIGTYPE_p_unsigned_char message, uint len) {
    DTLSConnection.Result ret = new DTLSConnection.Result(GameLiftRealtimeNativePINVOKE.DTLSConnection_send(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(message), len), true);
    return ret;
  }

  public DTLSConnection.Result receive_message(SWIGTYPE_p_unsigned_char message, uint len) {
    DTLSConnection.Result ret = new DTLSConnection.Result(GameLiftRealtimeNativePINVOKE.DTLSConnection_receive_message(swigCPtr, SWIGTYPE_p_unsigned_char.getCPtr(message), len), true);
    return ret;
  }

  public DTLSConnection.Result close() {
    DTLSConnection.Result ret = new DTLSConnection.Result(GameLiftRealtimeNativePINVOKE.DTLSConnection_close(swigCPtr), true);
    return ret;
  }

}

}
