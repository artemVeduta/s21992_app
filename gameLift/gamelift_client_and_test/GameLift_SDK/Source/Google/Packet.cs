// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: proto/Packet.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Gamelift.Rt.Proto {

  /// <summary>Holder for reflection information generated from proto/Packet.proto</summary>
  public static partial class PacketReflection {

    #region Descriptor
    /// <summary>File descriptor for proto/Packet.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PacketReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJwcm90by9QYWNrZXQucHJvdG8SFWNvbS5nYW1lbGlmdC5ydC5wcm90bxoY",
            "cHJvdG8vQ29yZUNvbW1hbmRzLnByb3RvGhlwcm90by9Hcm91cE1lc3NhZ2Vz",
            "LnByb3RvIoUICgZQYWNrZXQSDgoGb3BDb2RlGAEgASgREhYKDnNlcXVlbmNl",
            "TnVtYmVyGAIgASgFEhQKDHRhcmdldFBsYXllchgDIAEoBRITCgt0YXJnZXRH",
            "cm91cBgEIAEoBRIOCgZzZW5kZXIYBSABKAUSEAoIcmVsaWFibGUYBiABKAgS",
            "FQoNY2xpZW50VmVyc2lvbhgHIAEoBRIPCgdwYXlsb2FkGA8gASgMEjQKBWxv",
            "Z2luGB4gASgLMiMuY29tLmdhbWVsaWZ0LnJ0LnByb3RvLkxvZ2luQ29tbWFu",
            "ZEgAEjkKC2xvZ2luUmVzdWx0GB8gASgLMiIuY29tLmdhbWVsaWZ0LnJ0LnBy",
            "b3RvLkxvZ2luUmVzdWx0SAASMgoEcGluZxggIAEoCzIiLmNvbS5nYW1lbGlm",
            "dC5ydC5wcm90by5QaW5nQ29tbWFuZEgAEjcKCnBpbmdSZXN1bHQYISABKAsy",
            "IS5jb20uZ2FtZWxpZnQucnQucHJvdG8uUGluZ1Jlc3VsdEgAEkYKDnZlcmlm",
            "eUlkZW50aXR5GCUgASgLMiwuY29tLmdhbWVsaWZ0LnJ0LnByb3RvLlZlcmlm",
            "eUlkZW50aXR5Q29tbWFuZEgAEksKFHZlcmlmeUlkZW50aXR5UmVzdWx0GCYg",
            "ASgLMisuY29tLmdhbWVsaWZ0LnJ0LnByb3RvLlZlcmlmeUlkZW50aXR5UmVz",
            "dWx0SAASPgoKdWRwQ29ubmVjdBgiIAEoCzIoLmNvbS5nYW1lbGlmdC5ydC5w",
            "cm90by5VRFBDb25uZWN0TWVzc2FnZUgAEkQKDXBsYXllckNvbm5lY3QYIyAB",
            "KAsyKy5jb20uZ2FtZWxpZnQucnQucHJvdG8uUGxheWVyQ29ubmVjdE1lc3Nh",
            "Z2VIABJKChBwbGF5ZXJEaXNjb25uZWN0GCQgASgLMi4uY29tLmdhbWVsaWZ0",
            "LnJ0LnByb3RvLlBsYXllckRpc2Nvbm5lY3RNZXNzYWdlSAASNQoJam9pbkdy",
            "b3VwGCggASgLMiAuY29tLmdhbWVsaWZ0LnJ0LnByb3RvLkpvaW5Hcm91cEgA",
            "EjcKCmxlYXZlR3JvdXAYKSABKAsyIS5jb20uZ2FtZWxpZnQucnQucHJvdG8u",
            "TGVhdmVHcm91cEgAEk8KFnJlcXVlc3RHcm91cE1lbWJlcnNoaXAYKiABKAsy",
            "LS5jb20uZ2FtZWxpZnQucnQucHJvdG8uUmVxdWVzdEdyb3VwTWVtYmVyc2hp",
            "cEgAEk0KFWdyb3VwTWVtYmVyc2hpcFVwZGF0ZRgrIAEoCzIsLmNvbS5nYW1l",
            "bGlmdC5ydC5wcm90by5Hcm91cE1lbWJlcnNoaXBVcGRhdGVIAEIJCgdtZXNz",
            "YWdlYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Com.Gamelift.Rt.Proto.CoreCommandsReflection.Descriptor, global::Com.Gamelift.Rt.Proto.GroupMessagesReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Gamelift.Rt.Proto.Packet), global::Com.Gamelift.Rt.Proto.Packet.Parser, new[]{ "OpCode", "SequenceNumber", "TargetPlayer", "TargetGroup", "Sender", "Reliable", "ClientVersion", "Payload", "Login", "LoginResult", "Ping", "PingResult", "VerifyIdentity", "VerifyIdentityResult", "UdpConnect", "PlayerConnect", "PlayerDisconnect", "JoinGroup", "LeaveGroup", "RequestGroupMembership", "GroupMembershipUpdate" }, new[]{ "Message" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///:access=internal
  ///:deserialize=DeserializeLengthDelimited
  /// </summary>
  public sealed partial class Packet : pb::IMessage<Packet> {
    private static readonly pb::MessageParser<Packet> _parser = new pb::MessageParser<Packet>(() => new Packet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Packet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Gamelift.Rt.Proto.PacketReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Packet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Packet(Packet other) : this() {
      opCode_ = other.opCode_;
      sequenceNumber_ = other.sequenceNumber_;
      targetPlayer_ = other.targetPlayer_;
      targetGroup_ = other.targetGroup_;
      sender_ = other.sender_;
      reliable_ = other.reliable_;
      clientVersion_ = other.clientVersion_;
      payload_ = other.payload_;
      switch (other.MessageCase) {
        case MessageOneofCase.Login:
          Login = other.Login.Clone();
          break;
        case MessageOneofCase.LoginResult:
          LoginResult = other.LoginResult.Clone();
          break;
        case MessageOneofCase.Ping:
          Ping = other.Ping.Clone();
          break;
        case MessageOneofCase.PingResult:
          PingResult = other.PingResult.Clone();
          break;
        case MessageOneofCase.VerifyIdentity:
          VerifyIdentity = other.VerifyIdentity.Clone();
          break;
        case MessageOneofCase.VerifyIdentityResult:
          VerifyIdentityResult = other.VerifyIdentityResult.Clone();
          break;
        case MessageOneofCase.UdpConnect:
          UdpConnect = other.UdpConnect.Clone();
          break;
        case MessageOneofCase.PlayerConnect:
          PlayerConnect = other.PlayerConnect.Clone();
          break;
        case MessageOneofCase.PlayerDisconnect:
          PlayerDisconnect = other.PlayerDisconnect.Clone();
          break;
        case MessageOneofCase.JoinGroup:
          JoinGroup = other.JoinGroup.Clone();
          break;
        case MessageOneofCase.LeaveGroup:
          LeaveGroup = other.LeaveGroup.Clone();
          break;
        case MessageOneofCase.RequestGroupMembership:
          RequestGroupMembership = other.RequestGroupMembership.Clone();
          break;
        case MessageOneofCase.GroupMembershipUpdate:
          GroupMembershipUpdate = other.GroupMembershipUpdate.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Packet Clone() {
      return new Packet(this);
    }

    /// <summary>Field number for the "opCode" field.</summary>
    public const int OpCodeFieldNumber = 1;
    private int opCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OpCode {
      get { return opCode_; }
      set {
        opCode_ = value;
      }
    }

    /// <summary>Field number for the "sequenceNumber" field.</summary>
    public const int SequenceNumberFieldNumber = 2;
    private int sequenceNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SequenceNumber {
      get { return sequenceNumber_; }
      set {
        sequenceNumber_ = value;
      }
    }

    /// <summary>Field number for the "targetPlayer" field.</summary>
    public const int TargetPlayerFieldNumber = 3;
    private int targetPlayer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetPlayer {
      get { return targetPlayer_; }
      set {
        targetPlayer_ = value;
      }
    }

    /// <summary>Field number for the "targetGroup" field.</summary>
    public const int TargetGroupFieldNumber = 4;
    private int targetGroup_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetGroup {
      get { return targetGroup_; }
      set {
        targetGroup_ = value;
      }
    }

    /// <summary>Field number for the "sender" field.</summary>
    public const int SenderFieldNumber = 5;
    private int sender_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sender {
      get { return sender_; }
      set {
        sender_ = value;
      }
    }

    /// <summary>Field number for the "reliable" field.</summary>
    public const int ReliableFieldNumber = 6;
    private bool reliable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Reliable {
      get { return reliable_; }
      set {
        reliable_ = value;
      }
    }

    /// <summary>Field number for the "clientVersion" field.</summary>
    public const int ClientVersionFieldNumber = 7;
    private int clientVersion_;
    /// <summary>
    /// Version of the Realtime Client (i.e. NOT the customer's game)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ClientVersion {
      get { return clientVersion_; }
      set {
        clientVersion_ = value;
      }
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 15;
    private pb::ByteString payload_ = pb::ByteString.Empty;
    /// <summary>
    /// payload is for customer-provided blob-style data that is not modeled in anyway and simply passed through
    ///:deserialize=instance.ReadPayload(stream)
    ///:serialize=instance.WritePayload(stream);
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Payload {
      get { return payload_; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "login" field.</summary>
    public const int LoginFieldNumber = 30;
    /// <summary>
    /// General Commands
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Gamelift.Rt.Proto.LoginCommand Login {
      get { return messageCase_ == MessageOneofCase.Login ? (global::Com.Gamelift.Rt.Proto.LoginCommand) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Login;
      }
    }

    /// <summary>Field number for the "loginResult" field.</summary>
    public const int LoginResultFieldNumber = 31;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Gamelift.Rt.Proto.LoginResult LoginResult {
      get { return messageCase_ == MessageOneofCase.LoginResult ? (global::Com.Gamelift.Rt.Proto.LoginResult) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.LoginResult;
      }
    }

    /// <summary>Field number for the "ping" field.</summary>
    public const int PingFieldNumber = 32;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Gamelift.Rt.Proto.PingCommand Ping {
      get { return messageCase_ == MessageOneofCase.Ping ? (global::Com.Gamelift.Rt.Proto.PingCommand) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Ping;
      }
    }

    /// <summary>Field number for the "pingResult" field.</summary>
    public const int PingResultFieldNumber = 33;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Gamelift.Rt.Proto.PingResult PingResult {
      get { return messageCase_ == MessageOneofCase.PingResult ? (global::Com.Gamelift.Rt.Proto.PingResult) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.PingResult;
      }
    }

    /// <summary>Field number for the "verifyIdentity" field.</summary>
    public const int VerifyIdentityFieldNumber = 37;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Gamelift.Rt.Proto.VerifyIdentityCommand VerifyIdentity {
      get { return messageCase_ == MessageOneofCase.VerifyIdentity ? (global::Com.Gamelift.Rt.Proto.VerifyIdentityCommand) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.VerifyIdentity;
      }
    }

    /// <summary>Field number for the "verifyIdentityResult" field.</summary>
    public const int VerifyIdentityResultFieldNumber = 38;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Gamelift.Rt.Proto.VerifyIdentityResult VerifyIdentityResult {
      get { return messageCase_ == MessageOneofCase.VerifyIdentityResult ? (global::Com.Gamelift.Rt.Proto.VerifyIdentityResult) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.VerifyIdentityResult;
      }
    }

    /// <summary>Field number for the "udpConnect" field.</summary>
    public const int UdpConnectFieldNumber = 34;
    /// <summary>
    /// Connect Commands
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Gamelift.Rt.Proto.UDPConnectMessage UdpConnect {
      get { return messageCase_ == MessageOneofCase.UdpConnect ? (global::Com.Gamelift.Rt.Proto.UDPConnectMessage) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.UdpConnect;
      }
    }

    /// <summary>Field number for the "playerConnect" field.</summary>
    public const int PlayerConnectFieldNumber = 35;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Gamelift.Rt.Proto.PlayerConnectMessage PlayerConnect {
      get { return messageCase_ == MessageOneofCase.PlayerConnect ? (global::Com.Gamelift.Rt.Proto.PlayerConnectMessage) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.PlayerConnect;
      }
    }

    /// <summary>Field number for the "playerDisconnect" field.</summary>
    public const int PlayerDisconnectFieldNumber = 36;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Gamelift.Rt.Proto.PlayerDisconnectMessage PlayerDisconnect {
      get { return messageCase_ == MessageOneofCase.PlayerDisconnect ? (global::Com.Gamelift.Rt.Proto.PlayerDisconnectMessage) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.PlayerDisconnect;
      }
    }

    /// <summary>Field number for the "joinGroup" field.</summary>
    public const int JoinGroupFieldNumber = 40;
    /// <summary>
    /// Group Related Commands
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Gamelift.Rt.Proto.JoinGroup JoinGroup {
      get { return messageCase_ == MessageOneofCase.JoinGroup ? (global::Com.Gamelift.Rt.Proto.JoinGroup) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.JoinGroup;
      }
    }

    /// <summary>Field number for the "leaveGroup" field.</summary>
    public const int LeaveGroupFieldNumber = 41;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Gamelift.Rt.Proto.LeaveGroup LeaveGroup {
      get { return messageCase_ == MessageOneofCase.LeaveGroup ? (global::Com.Gamelift.Rt.Proto.LeaveGroup) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.LeaveGroup;
      }
    }

    /// <summary>Field number for the "requestGroupMembership" field.</summary>
    public const int RequestGroupMembershipFieldNumber = 42;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Gamelift.Rt.Proto.RequestGroupMembership RequestGroupMembership {
      get { return messageCase_ == MessageOneofCase.RequestGroupMembership ? (global::Com.Gamelift.Rt.Proto.RequestGroupMembership) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.RequestGroupMembership;
      }
    }

    /// <summary>Field number for the "groupMembershipUpdate" field.</summary>
    public const int GroupMembershipUpdateFieldNumber = 43;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Gamelift.Rt.Proto.GroupMembershipUpdate GroupMembershipUpdate {
      get { return messageCase_ == MessageOneofCase.GroupMembershipUpdate ? (global::Com.Gamelift.Rt.Proto.GroupMembershipUpdate) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.GroupMembershipUpdate;
      }
    }

    private object message_;
    /// <summary>Enum of possible cases for the "message" oneof.</summary>
    public enum MessageOneofCase {
      None = 0,
      Login = 30,
      LoginResult = 31,
      Ping = 32,
      PingResult = 33,
      VerifyIdentity = 37,
      VerifyIdentityResult = 38,
      UdpConnect = 34,
      PlayerConnect = 35,
      PlayerDisconnect = 36,
      JoinGroup = 40,
      LeaveGroup = 41,
      RequestGroupMembership = 42,
      GroupMembershipUpdate = 43,
    }
    private MessageOneofCase messageCase_ = MessageOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageOneofCase MessageCase {
      get { return messageCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessage() {
      messageCase_ = MessageOneofCase.None;
      message_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Packet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Packet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OpCode != other.OpCode) return false;
      if (SequenceNumber != other.SequenceNumber) return false;
      if (TargetPlayer != other.TargetPlayer) return false;
      if (TargetGroup != other.TargetGroup) return false;
      if (Sender != other.Sender) return false;
      if (Reliable != other.Reliable) return false;
      if (ClientVersion != other.ClientVersion) return false;
      if (Payload != other.Payload) return false;
      if (!object.Equals(Login, other.Login)) return false;
      if (!object.Equals(LoginResult, other.LoginResult)) return false;
      if (!object.Equals(Ping, other.Ping)) return false;
      if (!object.Equals(PingResult, other.PingResult)) return false;
      if (!object.Equals(VerifyIdentity, other.VerifyIdentity)) return false;
      if (!object.Equals(VerifyIdentityResult, other.VerifyIdentityResult)) return false;
      if (!object.Equals(UdpConnect, other.UdpConnect)) return false;
      if (!object.Equals(PlayerConnect, other.PlayerConnect)) return false;
      if (!object.Equals(PlayerDisconnect, other.PlayerDisconnect)) return false;
      if (!object.Equals(JoinGroup, other.JoinGroup)) return false;
      if (!object.Equals(LeaveGroup, other.LeaveGroup)) return false;
      if (!object.Equals(RequestGroupMembership, other.RequestGroupMembership)) return false;
      if (!object.Equals(GroupMembershipUpdate, other.GroupMembershipUpdate)) return false;
      if (MessageCase != other.MessageCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OpCode != 0) hash ^= OpCode.GetHashCode();
      if (SequenceNumber != 0) hash ^= SequenceNumber.GetHashCode();
      if (TargetPlayer != 0) hash ^= TargetPlayer.GetHashCode();
      if (TargetGroup != 0) hash ^= TargetGroup.GetHashCode();
      if (Sender != 0) hash ^= Sender.GetHashCode();
      if (Reliable != false) hash ^= Reliable.GetHashCode();
      if (ClientVersion != 0) hash ^= ClientVersion.GetHashCode();
      if (Payload.Length != 0) hash ^= Payload.GetHashCode();
      if (messageCase_ == MessageOneofCase.Login) hash ^= Login.GetHashCode();
      if (messageCase_ == MessageOneofCase.LoginResult) hash ^= LoginResult.GetHashCode();
      if (messageCase_ == MessageOneofCase.Ping) hash ^= Ping.GetHashCode();
      if (messageCase_ == MessageOneofCase.PingResult) hash ^= PingResult.GetHashCode();
      if (messageCase_ == MessageOneofCase.VerifyIdentity) hash ^= VerifyIdentity.GetHashCode();
      if (messageCase_ == MessageOneofCase.VerifyIdentityResult) hash ^= VerifyIdentityResult.GetHashCode();
      if (messageCase_ == MessageOneofCase.UdpConnect) hash ^= UdpConnect.GetHashCode();
      if (messageCase_ == MessageOneofCase.PlayerConnect) hash ^= PlayerConnect.GetHashCode();
      if (messageCase_ == MessageOneofCase.PlayerDisconnect) hash ^= PlayerDisconnect.GetHashCode();
      if (messageCase_ == MessageOneofCase.JoinGroup) hash ^= JoinGroup.GetHashCode();
      if (messageCase_ == MessageOneofCase.LeaveGroup) hash ^= LeaveGroup.GetHashCode();
      if (messageCase_ == MessageOneofCase.RequestGroupMembership) hash ^= RequestGroupMembership.GetHashCode();
      if (messageCase_ == MessageOneofCase.GroupMembershipUpdate) hash ^= GroupMembershipUpdate.GetHashCode();
      hash ^= (int) messageCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OpCode != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(OpCode);
      }
      if (SequenceNumber != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SequenceNumber);
      }
      if (TargetPlayer != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TargetPlayer);
      }
      if (TargetGroup != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TargetGroup);
      }
      if (Sender != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Sender);
      }
      if (Reliable != false) {
        output.WriteRawTag(48);
        output.WriteBool(Reliable);
      }
      if (ClientVersion != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ClientVersion);
      }
      if (Payload.Length != 0) {
        output.WriteRawTag(122);
        output.WriteBytes(Payload);
      }
      if (messageCase_ == MessageOneofCase.Login) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(Login);
      }
      if (messageCase_ == MessageOneofCase.LoginResult) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(LoginResult);
      }
      if (messageCase_ == MessageOneofCase.Ping) {
        output.WriteRawTag(130, 2);
        output.WriteMessage(Ping);
      }
      if (messageCase_ == MessageOneofCase.PingResult) {
        output.WriteRawTag(138, 2);
        output.WriteMessage(PingResult);
      }
      if (messageCase_ == MessageOneofCase.UdpConnect) {
        output.WriteRawTag(146, 2);
        output.WriteMessage(UdpConnect);
      }
      if (messageCase_ == MessageOneofCase.PlayerConnect) {
        output.WriteRawTag(154, 2);
        output.WriteMessage(PlayerConnect);
      }
      if (messageCase_ == MessageOneofCase.PlayerDisconnect) {
        output.WriteRawTag(162, 2);
        output.WriteMessage(PlayerDisconnect);
      }
      if (messageCase_ == MessageOneofCase.VerifyIdentity) {
        output.WriteRawTag(170, 2);
        output.WriteMessage(VerifyIdentity);
      }
      if (messageCase_ == MessageOneofCase.VerifyIdentityResult) {
        output.WriteRawTag(178, 2);
        output.WriteMessage(VerifyIdentityResult);
      }
      if (messageCase_ == MessageOneofCase.JoinGroup) {
        output.WriteRawTag(194, 2);
        output.WriteMessage(JoinGroup);
      }
      if (messageCase_ == MessageOneofCase.LeaveGroup) {
        output.WriteRawTag(202, 2);
        output.WriteMessage(LeaveGroup);
      }
      if (messageCase_ == MessageOneofCase.RequestGroupMembership) {
        output.WriteRawTag(210, 2);
        output.WriteMessage(RequestGroupMembership);
      }
      if (messageCase_ == MessageOneofCase.GroupMembershipUpdate) {
        output.WriteRawTag(218, 2);
        output.WriteMessage(GroupMembershipUpdate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OpCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(OpCode);
      }
      if (SequenceNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SequenceNumber);
      }
      if (TargetPlayer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetPlayer);
      }
      if (TargetGroup != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetGroup);
      }
      if (Sender != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sender);
      }
      if (Reliable != false) {
        size += 1 + 1;
      }
      if (ClientVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClientVersion);
      }
      if (Payload.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Payload);
      }
      if (messageCase_ == MessageOneofCase.Login) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Login);
      }
      if (messageCase_ == MessageOneofCase.LoginResult) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LoginResult);
      }
      if (messageCase_ == MessageOneofCase.Ping) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Ping);
      }
      if (messageCase_ == MessageOneofCase.PingResult) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PingResult);
      }
      if (messageCase_ == MessageOneofCase.VerifyIdentity) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(VerifyIdentity);
      }
      if (messageCase_ == MessageOneofCase.VerifyIdentityResult) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(VerifyIdentityResult);
      }
      if (messageCase_ == MessageOneofCase.UdpConnect) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(UdpConnect);
      }
      if (messageCase_ == MessageOneofCase.PlayerConnect) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PlayerConnect);
      }
      if (messageCase_ == MessageOneofCase.PlayerDisconnect) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PlayerDisconnect);
      }
      if (messageCase_ == MessageOneofCase.JoinGroup) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(JoinGroup);
      }
      if (messageCase_ == MessageOneofCase.LeaveGroup) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LeaveGroup);
      }
      if (messageCase_ == MessageOneofCase.RequestGroupMembership) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RequestGroupMembership);
      }
      if (messageCase_ == MessageOneofCase.GroupMembershipUpdate) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GroupMembershipUpdate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Packet other) {
      if (other == null) {
        return;
      }
      if (other.OpCode != 0) {
        OpCode = other.OpCode;
      }
      if (other.SequenceNumber != 0) {
        SequenceNumber = other.SequenceNumber;
      }
      if (other.TargetPlayer != 0) {
        TargetPlayer = other.TargetPlayer;
      }
      if (other.TargetGroup != 0) {
        TargetGroup = other.TargetGroup;
      }
      if (other.Sender != 0) {
        Sender = other.Sender;
      }
      if (other.Reliable != false) {
        Reliable = other.Reliable;
      }
      if (other.ClientVersion != 0) {
        ClientVersion = other.ClientVersion;
      }
      if (other.Payload.Length != 0) {
        Payload = other.Payload;
      }
      switch (other.MessageCase) {
        case MessageOneofCase.Login:
          if (Login == null) {
            Login = new global::Com.Gamelift.Rt.Proto.LoginCommand();
          }
          Login.MergeFrom(other.Login);
          break;
        case MessageOneofCase.LoginResult:
          if (LoginResult == null) {
            LoginResult = new global::Com.Gamelift.Rt.Proto.LoginResult();
          }
          LoginResult.MergeFrom(other.LoginResult);
          break;
        case MessageOneofCase.Ping:
          if (Ping == null) {
            Ping = new global::Com.Gamelift.Rt.Proto.PingCommand();
          }
          Ping.MergeFrom(other.Ping);
          break;
        case MessageOneofCase.PingResult:
          if (PingResult == null) {
            PingResult = new global::Com.Gamelift.Rt.Proto.PingResult();
          }
          PingResult.MergeFrom(other.PingResult);
          break;
        case MessageOneofCase.VerifyIdentity:
          if (VerifyIdentity == null) {
            VerifyIdentity = new global::Com.Gamelift.Rt.Proto.VerifyIdentityCommand();
          }
          VerifyIdentity.MergeFrom(other.VerifyIdentity);
          break;
        case MessageOneofCase.VerifyIdentityResult:
          if (VerifyIdentityResult == null) {
            VerifyIdentityResult = new global::Com.Gamelift.Rt.Proto.VerifyIdentityResult();
          }
          VerifyIdentityResult.MergeFrom(other.VerifyIdentityResult);
          break;
        case MessageOneofCase.UdpConnect:
          if (UdpConnect == null) {
            UdpConnect = new global::Com.Gamelift.Rt.Proto.UDPConnectMessage();
          }
          UdpConnect.MergeFrom(other.UdpConnect);
          break;
        case MessageOneofCase.PlayerConnect:
          if (PlayerConnect == null) {
            PlayerConnect = new global::Com.Gamelift.Rt.Proto.PlayerConnectMessage();
          }
          PlayerConnect.MergeFrom(other.PlayerConnect);
          break;
        case MessageOneofCase.PlayerDisconnect:
          if (PlayerDisconnect == null) {
            PlayerDisconnect = new global::Com.Gamelift.Rt.Proto.PlayerDisconnectMessage();
          }
          PlayerDisconnect.MergeFrom(other.PlayerDisconnect);
          break;
        case MessageOneofCase.JoinGroup:
          if (JoinGroup == null) {
            JoinGroup = new global::Com.Gamelift.Rt.Proto.JoinGroup();
          }
          JoinGroup.MergeFrom(other.JoinGroup);
          break;
        case MessageOneofCase.LeaveGroup:
          if (LeaveGroup == null) {
            LeaveGroup = new global::Com.Gamelift.Rt.Proto.LeaveGroup();
          }
          LeaveGroup.MergeFrom(other.LeaveGroup);
          break;
        case MessageOneofCase.RequestGroupMembership:
          if (RequestGroupMembership == null) {
            RequestGroupMembership = new global::Com.Gamelift.Rt.Proto.RequestGroupMembership();
          }
          RequestGroupMembership.MergeFrom(other.RequestGroupMembership);
          break;
        case MessageOneofCase.GroupMembershipUpdate:
          if (GroupMembershipUpdate == null) {
            GroupMembershipUpdate = new global::Com.Gamelift.Rt.Proto.GroupMembershipUpdate();
          }
          GroupMembershipUpdate.MergeFrom(other.GroupMembershipUpdate);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OpCode = input.ReadSInt32();
            break;
          }
          case 16: {
            SequenceNumber = input.ReadInt32();
            break;
          }
          case 24: {
            TargetPlayer = input.ReadInt32();
            break;
          }
          case 32: {
            TargetGroup = input.ReadInt32();
            break;
          }
          case 40: {
            Sender = input.ReadInt32();
            break;
          }
          case 48: {
            Reliable = input.ReadBool();
            break;
          }
          case 56: {
            ClientVersion = input.ReadInt32();
            break;
          }
          case 122: {
            Payload = input.ReadBytes();
            break;
          }
          case 242: {
            global::Com.Gamelift.Rt.Proto.LoginCommand subBuilder = new global::Com.Gamelift.Rt.Proto.LoginCommand();
            if (messageCase_ == MessageOneofCase.Login) {
              subBuilder.MergeFrom(Login);
            }
            input.ReadMessage(subBuilder);
            Login = subBuilder;
            break;
          }
          case 250: {
            global::Com.Gamelift.Rt.Proto.LoginResult subBuilder = new global::Com.Gamelift.Rt.Proto.LoginResult();
            if (messageCase_ == MessageOneofCase.LoginResult) {
              subBuilder.MergeFrom(LoginResult);
            }
            input.ReadMessage(subBuilder);
            LoginResult = subBuilder;
            break;
          }
          case 258: {
            global::Com.Gamelift.Rt.Proto.PingCommand subBuilder = new global::Com.Gamelift.Rt.Proto.PingCommand();
            if (messageCase_ == MessageOneofCase.Ping) {
              subBuilder.MergeFrom(Ping);
            }
            input.ReadMessage(subBuilder);
            Ping = subBuilder;
            break;
          }
          case 266: {
            global::Com.Gamelift.Rt.Proto.PingResult subBuilder = new global::Com.Gamelift.Rt.Proto.PingResult();
            if (messageCase_ == MessageOneofCase.PingResult) {
              subBuilder.MergeFrom(PingResult);
            }
            input.ReadMessage(subBuilder);
            PingResult = subBuilder;
            break;
          }
          case 274: {
            global::Com.Gamelift.Rt.Proto.UDPConnectMessage subBuilder = new global::Com.Gamelift.Rt.Proto.UDPConnectMessage();
            if (messageCase_ == MessageOneofCase.UdpConnect) {
              subBuilder.MergeFrom(UdpConnect);
            }
            input.ReadMessage(subBuilder);
            UdpConnect = subBuilder;
            break;
          }
          case 282: {
            global::Com.Gamelift.Rt.Proto.PlayerConnectMessage subBuilder = new global::Com.Gamelift.Rt.Proto.PlayerConnectMessage();
            if (messageCase_ == MessageOneofCase.PlayerConnect) {
              subBuilder.MergeFrom(PlayerConnect);
            }
            input.ReadMessage(subBuilder);
            PlayerConnect = subBuilder;
            break;
          }
          case 290: {
            global::Com.Gamelift.Rt.Proto.PlayerDisconnectMessage subBuilder = new global::Com.Gamelift.Rt.Proto.PlayerDisconnectMessage();
            if (messageCase_ == MessageOneofCase.PlayerDisconnect) {
              subBuilder.MergeFrom(PlayerDisconnect);
            }
            input.ReadMessage(subBuilder);
            PlayerDisconnect = subBuilder;
            break;
          }
          case 298: {
            global::Com.Gamelift.Rt.Proto.VerifyIdentityCommand subBuilder = new global::Com.Gamelift.Rt.Proto.VerifyIdentityCommand();
            if (messageCase_ == MessageOneofCase.VerifyIdentity) {
              subBuilder.MergeFrom(VerifyIdentity);
            }
            input.ReadMessage(subBuilder);
            VerifyIdentity = subBuilder;
            break;
          }
          case 306: {
            global::Com.Gamelift.Rt.Proto.VerifyIdentityResult subBuilder = new global::Com.Gamelift.Rt.Proto.VerifyIdentityResult();
            if (messageCase_ == MessageOneofCase.VerifyIdentityResult) {
              subBuilder.MergeFrom(VerifyIdentityResult);
            }
            input.ReadMessage(subBuilder);
            VerifyIdentityResult = subBuilder;
            break;
          }
          case 322: {
            global::Com.Gamelift.Rt.Proto.JoinGroup subBuilder = new global::Com.Gamelift.Rt.Proto.JoinGroup();
            if (messageCase_ == MessageOneofCase.JoinGroup) {
              subBuilder.MergeFrom(JoinGroup);
            }
            input.ReadMessage(subBuilder);
            JoinGroup = subBuilder;
            break;
          }
          case 330: {
            global::Com.Gamelift.Rt.Proto.LeaveGroup subBuilder = new global::Com.Gamelift.Rt.Proto.LeaveGroup();
            if (messageCase_ == MessageOneofCase.LeaveGroup) {
              subBuilder.MergeFrom(LeaveGroup);
            }
            input.ReadMessage(subBuilder);
            LeaveGroup = subBuilder;
            break;
          }
          case 338: {
            global::Com.Gamelift.Rt.Proto.RequestGroupMembership subBuilder = new global::Com.Gamelift.Rt.Proto.RequestGroupMembership();
            if (messageCase_ == MessageOneofCase.RequestGroupMembership) {
              subBuilder.MergeFrom(RequestGroupMembership);
            }
            input.ReadMessage(subBuilder);
            RequestGroupMembership = subBuilder;
            break;
          }
          case 346: {
            global::Com.Gamelift.Rt.Proto.GroupMembershipUpdate subBuilder = new global::Com.Gamelift.Rt.Proto.GroupMembershipUpdate();
            if (messageCase_ == MessageOneofCase.GroupMembershipUpdate) {
              subBuilder.MergeFrom(GroupMembershipUpdate);
            }
            input.ReadMessage(subBuilder);
            GroupMembershipUpdate = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
